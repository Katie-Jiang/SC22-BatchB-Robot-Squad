{"backend_state":"running","connection_file":"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/.local/share/jupyter/runtime/kernel-5fa6f2f5-956f-4a52-8c8c-30ce3cdd55b2.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657213105092,"exec_count":141,"id":"b14789","input":"import plotly.express as px\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","kernel":"ds_env","pos":0,"start":1657213105078,"state":"done","type":"cell"}
{"cell_type":"code","end":1657213107295,"exec_count":142,"id":"3fb894","input":"# loading data here\nheart = pd.read_csv(\"Data/heart.csv\")","kernel":"ds_env","pos":2,"start":1657213107286,"state":"done","type":"cell"}
{"cell_type":"code","end":1657213115484,"exec_count":143,"id":"f70891","input":"heart.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 918 entries, 0 to 917\nData columns (total 12 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   Age             918 non-null    int64  \n 1   Sex             918 non-null    object \n 2   ChestPainType   918 non-null    object \n 3   RestingBP       918 non-null    int64  \n 4   Cholesterol     918 non-null    int64  \n 5   FastingBS       918 non-null    int64  \n 6   RestingECG      918 non-null    object \n 7   MaxHR           918 non-null    int64  \n 8   ExerciseAngina  918 non-null    object \n 9   Oldpeak         918 non-null    float64\n 10  ST_Slope        918 non-null    object \n 11  HeartDisease    918 non-null    int64  \ndtypes: float64(1), int64(6), object(5)\nmemory usage: 86.2+ KB\n"}},"pos":17,"start":1657213115454,"state":"done","type":"cell"}
{"cell_type":"code","end":1657213115816,"exec_count":144,"id":"df31e4","input":"heart.isnull().sum()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Age               0\nSex               0\nChestPainType     0\nRestingBP         0\nCholesterol       0\nFastingBS         0\nRestingECG        0\nMaxHR             0\nExerciseAngina    0\nOldpeak           0\nST_Slope          0\nHeartDisease      0\ndtype: int64"},"exec_count":144}},"pos":18,"start":1657213115810,"state":"done","type":"cell"}
{"cell_type":"code","end":1657213116150,"exec_count":145,"id":"1ac2f3","input":"# remove outlier\n# heart[(heart['RestingBP'] == 0) & (heart['HeartDisease'] == 1)]\nrow_to_drop = [449]\nheart.drop(row_to_drop, axis= 0, inplace= True)\n\n# convert categorical value into numerical\nheart_update = pd.get_dummies(heart, columns = ['RestingECG','Sex','ChestPainType', 'ST_Slope', 'ExerciseAngina'])","kernel":"ds_env","pos":19,"scrolled":true,"start":1657213116132,"state":"done","type":"cell"}
{"cell_type":"code","end":1657213119356,"exec_count":146,"id":"4b57bb","input":"# loading library\nimport sklearn\nimport plotly.express as px\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, recall_score, f1_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","kernel":"ds_env","pos":23,"start":1657213119352,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"d98aa5","input":"# use for final project\nfig = px.box(heart, y=\"RestingBP\", x='HeartDisease', title=\"Resting BP vs Heart Disease\",color=\"Sex\")\nfig.update_layout(width=1000, height=700)\nfig.show()","output":{"0":{"data":{"iframe":"18d5dfd7f846e5f389c16a0436479e69ebba5f55"},"exec_count":14,"output_type":"execute_result"}},"pos":10,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"89b1b7","input":"# use for final project\nsorted_heart = heart.sort_values(by = 'HeartDisease', ascending = True)\nfig = px.bar(sorted_heart, y = \"Cholesterol\", x= \"MaxHR\", color= \"HeartDisease\", title = \"Cholesterol and MaxHR's Effect on Heart Disease\")\nfig.update_layout(width=1500, height=800)\nfig.show()","output":{"0":{"data":{"iframe":"6743d4e1287a012f6a52265f971db10e712ee87f"},"exec_count":3,"output_type":"execute_result"}},"pos":4,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"4365c4","input":"# use for final project\nfig = px.scatter(heart,color_discrete_sequence=px.colors.qualitative.Pastel, x=\"Age\", y=\"Cholesterol\",\n\t         size=\"Cholesterol\", color=\"HeartDisease\",\n                 hover_name=\"Sex\", log_x=True, size_max=25, title = \"Age and Cholesterol's Correlation to Heart Disease\")\n\nfig.update_layout(width=1000, height=600)\nfig.show()\n","output":{"0":{"data":{"iframe":"bfa9781cc961e5bb190cf7959510d2447a74acdb"},"exec_count":4,"output_type":"execute_result"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"d703fb","input":"# use for final project\nfig = px.imshow(heart.corr(), color_continuous_scale='pubu', title = \"Correlation Between Different Parameters and Heart Disease\")\nfig.show()","output":{"0":{"data":{"iframe":"e52c64f6793b4da60ab4119ee8b46d6f3148f54b"},"exec_count":5,"output_type":"execute_result"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"96d783","input":"# use for final project\nfig = px.density_contour(heart, x=\"Age\", y=\"MaxHR\", title=\"MaxHR vs Age\", facet_col=\"Sex\", color=\"HeartDisease\")\nfig.update_layout(width=1500, height=800)\nfig.show()","output":{"0":{"data":{"iframe":"59be0b36b9d7236d808024065dbf8956955c6e58"},"exec_count":7,"output_type":"execute_result"}},"pos":12,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"c5b52a","input":"fig = px.density_contour(heart, x=\"Age\", y=\"MaxHR\", title= \"MaxHR vs Age\")\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels = True)\nfig.update_layout(width=1000, height=600)\nfig.show()","output":{"0":{"data":{"iframe":"d083a4f4c147a60d9f1f05266eede6e65a53cf5d"},"exec_count":8,"output_type":"execute_result"}},"pos":14,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"markdown","exec_count":0,"id":"21aadd","input":"## Data Modeling\n\n","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0665e0","input":"Interpretation: The bar graph shows how people with a lower max heart rate have a slightly higher chance of getting heart heart disease. For example, a person who has a max heart rate of 180 is far more likely to not have heart disease than to have it, and a person with a max heart rate of 105 is more likely to have heart rate than to not have it. The graph also shows that people with higher cholesterol are more likely to be diagnosed with heart disease. \n\n","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"136889","input":"Interpretation: This bubble chart shows the correlation between a person's age and their cholesterol levels. If the color is teal, the user does not have heart disease. If the bubble color is yellow, the user does have heart disease. There does not seem to be a correlation between age and cholesterol because each age group has multiple users with varying cholesterol levels and a clear line of best fit cannot be drawn. \n\n","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"469fc9","input":"## SVM\n\n","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8bf09c","input":"## Data visualization\n\n","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a48a64","input":"## Data Loading\n\n","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b6777a","input":"Interpretation: This heat map shows the correlations between different variables such as age, resting blood pressure, cholesterol, fasting \nblood sugar, maximum heart rate, and oldpeak. For each combination of two variables, a block of color is shown. If the color is dark blue, the relationship between the two variables is strong. If the color is light blue, the relationship is weak. The diagonal line of dark blue squares is predictable because the data for the same variables \\(ex. age and age\\) is identical. Therefore, the correlation is extremely strong. However, we can see that there is no correlation between age and maximum heart rate because the color is almost 0. \n\n","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"df6240","input":"Interpretation: The density contour shows the correlation between maximum heart rate and age for females and males. It is evident that in both graphs people who were not diagnosed with heart disease have a greater maximum heart rate than people who were not diagnosed with heart disease. However, the maximum heart rates become similar as the age increases. \n\n","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f989a8","input":"Interpretation: This box plot shows that resting blood pressure is not a crucial factor concerning heart disease. Each plot has a similar median, so it is hard to differentiate whether or not the blood pressure will affect if a person will get heart disease. \n\n","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fb3d5c","input":"## Data Cleaning and Pre\\-processing\n\n","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fd02ab","input":"## Random Forest\n\n","pos":26,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fee6d8","input":"## Naive Bayes Classifier\n\n","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ff0651","input":"Interpretation: This density contour shows different ages compared to the maximum heart rate. At the age of 52\\-57, the max heart rate is at 124.5 which shows that 34 people at this age have a similar max heart rate.\n","pos":15,"state":"done","type":"cell"}
{"end":1657208508173,"exec_count":54,"id":"f23e52","input":"print(\"Recall score:\", recall_score(y_test, y_hat))\nprint (\"f1_score:\", f1_score(y_test, y_hat))\naccuracy_score(y_test, y_hat)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Recall score: 0.8317757009345794\nf1_score: 0.8768472906403941\n"},"1":{"data":{"text/plain":"0.8641304347826086"},"exec_count":54}},"pos":25.25,"start":1657208508120,"state":"done","type":"cell"}
{"end":1657208521289,"exec_count":55,"id":"41c9bb","input":"#GridSearchCV:\nparameters = {'var_smoothing': np.logspace(0,-9, num=50)} #getting better parameters\ngrid = GridSearchCV(my_naive_model, parameters) #defining model\ngrid.fit(x_train, y_train) #fitting model\ngrid.best_params_\ny_hat = grid.predict(x_test) #predictions\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g') #heatmap","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":55},"1":{"data":{"image/png":"440ee1f3c2e5faa4b3dc416422e36cbe1edeae2f","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":25.5,"start":1657208519448,"state":"done","type":"cell"}
{"end":1657208524591,"exec_count":56,"id":"fbd4df","input":"print(\"Recall score:\", recall_score(y_test, y_hat))\nprint (\"f1_score:\", f1_score(y_test, y_hat))\naccuracy_score(y_test, y_hat)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Recall score: 0.8598130841121495\nf1_score: 0.872037914691943\n"},"1":{"data":{"text/plain":"0.8532608695652174"},"exec_count":56}},"pos":25.625,"start":1657208524585,"state":"done","type":"cell"}
{"end":1657208576386,"exec_count":60,"id":"b0ad83","input":"#StandardScaler:\nmy_standard_scaler = StandardScaler() #defining model\nx_train_scaled = my_standard_scaler.fit_transform(x_train)\nx_test_scaled = my_standard_scaler.transform(x_test)\nparameters = {'var_smoothing': np.logspace(0,-9, num=50)}\ngrid = GridSearchCV(my_naive_model, parameters) #defining model?\ngrid.fit(x_train_scaled, y_train) #fitting model\ngrid.best_params_\ny_hat = grid.predict(x_test_scaled) #predictions\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g') #heatmap","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":60},"1":{"data":{"image/png":"7dcb885951ebee891b8f040f4db58d8d2fe7057e","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":25.75,"start":1657208575647,"state":"done","type":"cell"}
{"end":1657208577878,"exec_count":61,"id":"10978e","input":"print(\"Recall score:\", recall_score(y_test, y_hat))\nprint (\"f1_score:\", f1_score(y_test, y_hat))\naccuracy_score(y_test, y_hat)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Recall score: 0.794392523364486\nf1_score: 0.845771144278607\n"},"1":{"data":{"text/plain":"0.8315217391304348"},"exec_count":61}},"pos":25.875,"start":1657208577849,"state":"done","type":"cell"}
{"end":1657213120774,"exec_count":147,"id":"53e833","input":"# Spliting Data into train and testing\ntarget = heart_update[\"HeartDisease\"]\ninput_columns = heart_update.loc[:, heart_update.columns != \"HeartDisease\"]\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2, random_state=42)","kernel":"ds_env","pos":23.5,"start":1657213120760,"state":"done","type":"cell"}
{"end":1657213992216,"exec_count":179,"id":"24bd43","input":"print ('Accuracy score:', accuracy_score(y_test, y_hat))\nprint ('Recall score:', recall_score(y_test, y_hat))\nprint ('F1 score:', f1_score(y_test, y_hat))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Accuracy score: 0.7391304347826086\nRecall score: 0.7053571428571429\nF1 score: 0.7669902912621359\n"}},"pos":30.484375,"start":1657213992188,"state":"done","type":"cell"}
{"end":1657214183568,"exec_count":180,"id":"7b3792","input":"# RandomForest\nmy_RFC = RandomForestClassifier()\nmy_RFC.fit(x_train, y_train)\ny_hat = my_RFC.predict(x_test)\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":180},"1":{"data":{"image/png":"ad57cc6d063f005b83d280504790324c14abe042","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":26.5,"start":1657214182983,"state":"done","type":"cell"}
{"end":1657214190210,"exec_count":182,"id":"abc2d3","input":"print ('Accuracy score:', accuracy_score(y_test, y_hat))\nprint ('Recall score:', recall_score(y_test, y_hat))\nprint ('F1 score:', f1_score(y_test, y_hat))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Accuracy score: 0.8804347826086957\nRecall score: 0.8839285714285714\nF1 score: 0.8999999999999999\n"}},"pos":26.9375,"start":1657214190191,"state":"done","type":"cell"}
{"end":1657214758613,"exec_count":191,"id":"f294bf","input":"print ('Accuracy score:', accuracy_score(y_test, y_hat))\nprint ('Recall score:',recall_score(y_test, y_hat))\nprint ('F1 score:', f1_score(y_test, y_hat))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Accuracy score: 0.8804347826086957\nRecall score: 0.8839285714285714\nF1 score: 0.8999999999999999\n"}},"pos":36.5,"start":1657214758599,"state":"done","type":"cell"}
{"end":1657215374226,"exec_count":206,"id":"89b491","input":"y_hat_rf = grid_rf.predict(x_test)","kernel":"ds_env","pos":27.75,"start":1657215374191,"state":"done","type":"cell"}
{"end":1657215381591,"exec_count":207,"id":"6b3e37","input":"sns.heatmap(confusion_matrix(y_test, y_hat_rf), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":207},"1":{"data":{"image/png":"5bdfb09191a9c34c21bcccb2e213a7b88e8aec53","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":28.5,"start":1657215381404,"state":"done","type":"cell"}
{"end":1657215384913,"exec_count":208,"id":"d3bafb","input":"print(\"Accuracy Score:\", accuracy_score(y_test, y_hat_rf))\nprint(\"Recall Score:\", recall_score(y_test, y_hat_rf))\nprint(\"F1 Score:\", f1_score(y_test, y_hat_rf))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Accuracy Score: 0.8858695652173914\nRecall Score: 0.9017857142857143\nF1 Score: 0.905829596412556\n"}},"pos":28.75,"start":1657215384890,"state":"done","type":"cell"}
{"exec_count":178,"id":"568610","input":"svclassifier = SVC()#original model with no improvments \nsvclassifier.fit(x_train, y_train) \ny_hat = svclassifier.predict(x_test) #original predictions \ny_test = y_test.astype('int')\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #mean squared error \nmean_squared_error = total_squared_error/len(y_test) \nprint(\"mean squared error:\", mean_squared_error)\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g') #heat map for original","kernel":"ds_env","output":{"0":{"name":"stdout","text":"mean squared error: 0.2608695652173913\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":178},"2":{"data":{"image/png":"add6e5f965de1aac207dd78152f22764b1b50e07","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":30,"state":"done","type":"cell"}
{"exec_count":184,"id":"7bac03","input":"parameters = {'kernel':('rbf', 'linear', 'sigmoid'), 'degree' : (1,8,9), 'C':[1, 7]}\n\ngrid_svm = GridSearchCV(svclassifier, parameters, verbose = 1)\ngrid_svm.fit(x_train, y_train)\ngrid_svm.best_params_\nsvcclassifier = SVC(C = 7, degree = 1, kernel = 'linear')\nsvcclassifier.fit(x_train, y_train)\ny_hat = svcclassifier.predict(x_test) #predictions with improved model\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g') ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Fitting 5 folds for each of 18 candidates, totalling 90 fits\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":184},"2":{"data":{"image/png":"98809f8624da2b617e1446a0ae5b7798ad326498","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":31,"state":"done","type":"cell"}
{"exec_count":199,"id":"b25584","input":"# GridSearchCV\nRFC = RandomForestClassifier(random_state=42)\nparameters = {'max_depth':[50, 80, 100],  'max_features': [2, 3, 4], 'min_samples_split': [1, 2, 3], 'n_estimators': [100, 200, 300], 'criterion': ['gini', 'entropy', 'log_loss']}\ngrid_rf = GridSearchCV(RFC, parameters, verbose = 1)\n\ngrid_rf.fit(x_train, y_train)\ngrid_rf.best_params_","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Fitting 5 folds for each of 243 candidates, totalling 1215 fits\n"},"1":{"name":"stderr","text":"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n405 fits failed out of a total of 1215.\nThe score on these train-test partitions for these parameters will be set to nan.\nIf these failures are not expected, you can try to debug them by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n405 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/ensemble/_forest.py\", line 476, in fit\n    trees = Parallel(\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py\", line 1043, in __call__\n    if self.dispatch_one_batch(iterator):\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py\", line 861, in dispatch_one_batch\n    self._dispatch(tasks)\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py\", line 779, in _dispatch\n    job = self._backend.apply_async(batch, callback=cb)\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async\n    result = ImmediateResult(func)\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 572, in __init__\n    self.results = batch()\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in __call__\n    return [func(*args, **kwargs)\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in <listcomp>\n    return [func(*args, **kwargs)\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/fixes.py\", line 117, in __call__\n    return self.function(*args, **kwargs)\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/ensemble/_forest.py\", line 189, in _parallel_build_trees\n    tree.fit(X, y, sample_weight=curr_sample_weight, check_input=False)\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 969, in fit\n    super().fit(\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py\", line 265, in fit\n    check_scalar(\n  File \"/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py\", line 1480, in check_scalar\n    raise ValueError(\nValueError: min_samples_split == 1, must be >= 2.\n\n  warnings.warn(some_fits_failed_message, FitFailedWarning)\n/projects/f8b69746-629d-4592-8f76-5d11b6fd6282/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:953: UserWarning: One or more of the test scores are non-finite: [       nan        nan        nan 0.86894045 0.86487746 0.86895909\n 0.86488678 0.86348896 0.86757991        nan        nan        nan\n 0.85393719 0.86760787 0.86213773 0.85667692 0.86078651 0.86216569\n        nan        nan        nan 0.8648961  0.85396515 0.86488678\n 0.85532569 0.85808406 0.85943528        nan        nan        nan\n 0.85524182 0.86487746 0.86485882 0.86759855 0.86758923 0.87032895\n        nan        nan        nan 0.86626596 0.86488678 0.86486814\n 0.86896841 0.86350759 0.86759855        nan        nan        nan\n 0.86899637 0.86488678 0.86352623 0.86350759 0.8580561  0.87035691\n        nan        nan        nan 0.86075855 0.86484018 0.86759855\n 0.86488678 0.87305936 0.86348896        nan        nan        nan\n 0.86352623 0.85940732 0.86486814 0.86354487 0.866238   0.87172677\n        nan        nan        nan 0.86350759 0.86079583 0.85668624\n 0.87173609 0.85943528 0.86082378        nan        nan        nan\n 0.86758923 0.87031963 0.86347964 0.86352623 0.86759855 0.87169882\n        nan        nan        nan 0.8566676  0.85946324 0.86624732\n 0.86899637 0.86488678 0.86486814        nan        nan        nan\n 0.85392787 0.85942596 0.86625664 0.85670487 0.869015   0.8676265\n        nan        nan        nan 0.86621936 0.86350759 0.86896841\n 0.86077719 0.873078   0.87032895        nan        nan        nan\n 0.86352623 0.86216569 0.866238   0.86488678 0.86214705 0.8594446\n        nan        nan        nan 0.86352623 0.85806542 0.85943528\n 0.85940732 0.86350759 0.86215637        nan        nan        nan\n 0.86624732 0.87167086 0.86621936 0.870301   0.86760787 0.86622868\n        nan        nan        nan 0.87169882 0.86761718 0.87169882\n 0.8580561  0.86759855 0.86078651        nan        nan        nan\n 0.86216569 0.8594446  0.86214705 0.85806542 0.86760787 0.85942596\n        nan        nan        nan 0.8580561  0.85669555 0.86487746\n 0.85937937 0.87029168 0.87169882        nan        nan        nan\n 0.86076787 0.85941664 0.87169882 0.85668624 0.8648961  0.86759855\n        nan        nan        nan 0.86487746 0.86353555 0.85942596\n 0.85534433 0.85398379 0.86491473        nan        nan        nan\n 0.86760787 0.87032895 0.8648495  0.86757991 0.86488678 0.86759855\n        nan        nan        nan 0.85940732 0.86894045 0.85804678\n 0.86894977 0.86078651 0.86488678        nan        nan        nan\n 0.84576461 0.8648961  0.85806542 0.86215637 0.86353555 0.85532569\n        nan        nan        nan 0.85528842 0.86622868 0.86760787\n 0.86757059 0.87169882 0.87031963        nan        nan        nan\n 0.86076787 0.87031963 0.8676265  0.85943528 0.8484857  0.86214705\n        nan        nan        nan 0.86216569 0.86081446 0.85808406\n 0.86216569 0.86349828 0.8594446 ]\n  warnings.warn(\n"},"2":{"data":{"text/plain":"{'criterion': 'entropy',\n 'max_depth': 80,\n 'max_features': 2,\n 'min_samples_split': 3,\n 'n_estimators': 200}"},"exec_count":199}},"pos":27,"scrolled":false,"state":"done","type":"cell"}
{"exec_count":48,"id":"5f2cbc","input":"#GaussianNB:\nmy_naive_model = GaussianNB() #defining model\nmy_naive_model.fit(x_train, y_train) #fitting model\ny_hat = my_naive_model.predict(x_test) #predictions\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g') #heatmap","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":48},"1":{"data":{"image/png":"0d1327b3ce32269be66de3a85b903951496dd69f","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":25,"state":"done","type":"cell"}
{"id":0,"time":1657214731028,"type":"user"}
{"last_load":1657201129056,"type":"file"}